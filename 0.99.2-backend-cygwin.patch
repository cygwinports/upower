--- origsrc/upower-0.99.2/configure.ac	2015-01-06 02:40:28.970447300 -0600
+++ src/upower-0.99.2/configure.ac	2015-01-06 02:41:46.433783900 -0600
@@ -192,6 +192,7 @@ if test x$with_backend = x; then
 		[*-linux*],   [with_backend=linux],
 		[*-*freebsd*], [with_backend=freebsd],
 		[*-openbsd*], [with_backend=openbsd],
+		[*-cygwin*], [with_backend=cygwin],
 		              [with_backend=dummy])
 fi
 AC_DEFINE_UNQUOTED(BACKEND, "$with_backend", [backend])
@@ -218,6 +219,7 @@ AM_CONDITIONAL(BACKEND_TYPE_DUMMY, [test
 AM_CONDITIONAL(BACKEND_TYPE_LINUX, [test x$with_backend = xlinux])
 AM_CONDITIONAL(BACKEND_TYPE_FREEBSD, [test x$with_backend = xfreebsd])
 AM_CONDITIONAL(BACKEND_TYPE_OPENBSD, [test x$with_backend = xopenbsd])
+AM_CONDITIONAL(BACKEND_TYPE_CYGWIN, [test x$with_backend = xcygwin])
 
 dnl ---------------------------------------------------------------------------
 dnl - Build self tests
@@ -246,6 +248,7 @@ src/dummy/Makefile
 src/freebsd/Makefile
 src/openbsd/Makefile
 src/linux/Makefile
+src/cygwin/Makefile
 tools/Makefile
 doc/Makefile
 doc/version.xml
--- origsrc/upower-0.99.2/src/Makefile.am	2014-07-17 02:46:15.000000000 -0500
+++ src/upower-0.99.2/src/Makefile.am	2015-01-06 02:43:48.310760400 -0600
@@ -1,6 +1,6 @@
 ## Process this file with automake to produce Makefile.in
 
-SUBDIRS = dummy freebsd linux openbsd
+SUBDIRS = dummy freebsd linux openbsd cygwin
 
 AM_CPPFLAGS = \
 	$(PIE_CFLAGS)						\
@@ -84,12 +84,7 @@ upowerd_CPPFLAGS =						\
 	-I$(top_srcdir)/src					\
 	$(AM_CPPFLAGS)
 
-upowerd_LDADD =							\
-	-lm							\
-	$(USB_LIBS)						\
-	$(GIO_LIBS)						\
-	$(DBUS_GLIB_LIBS)					\
-	$(UPOWER_LIBS)
+upowerd_LDADD =
 
 if BACKEND_TYPE_DUMMY
 upowerd_LDADD += 						\
@@ -125,6 +120,19 @@ endif
 
 endif
 
+if BACKEND_TYPE_CYGWIN
+upowerd_LDADD += 						\
+	cygwin/libupshared.la					\
+	-lksguid
+endif
+
+upowerd_LDADD +=						\
+	-lm							\
+	$(USB_LIBS)						\
+	$(GIO_LIBS)						\
+	$(DBUS_GLIB_LIBS)					\
+	$(UPOWER_LIBS)
+
 upowerd_CFLAGS =						\
 	$(WARNINGFLAGS_C)					\
 	$(NULL)
--- origsrc/upower-0.99.2/src/cygwin/Makefile.am	1969-12-31 18:00:00.000000000 -0600
+++ src/upower-0.99.2/src/cygwin/Makefile.am	2015-01-06 02:45:05.537066900 -0600
@@ -0,0 +1,28 @@
+## Process this file with automake to produce Makefile.in
+
+AM_CPPFLAGS = \
+	-I$(top_builddir)/src -I$(top_srcdir)/src		\
+	-DUP_COMPILATION					\
+	-DG_LOG_DOMAIN=\"UPower-Cygwin\"			\
+	-I$(top_srcdir)/libupower-glib				\
+	$(DBUS_GLIB_CFLAGS)					\
+	$(POLKIT_CFLAGS)					\
+	$(GLIB_CFLAGS)
+
+if BACKEND_TYPE_CYGWIN
+noinst_LTLIBRARIES = libupshared.la
+endif
+
+libupshared_la_SOURCES =					\
+	up-backend.c						\
+	up-native.c						\
+	up-win-native.h						\
+	$(BUILT_SOURCES)
+
+libupshared_la_CFLAGS =					\
+	$(WARNINGFLAGS_C)
+
+clean-local :
+	rm -f *~
+
+-include $(top_srcdir)/git.mk
--- origsrc/upower-0.99.2/src/cygwin/up-backend.c	1969-12-31 18:00:00.000000000 -0600
+++ src/upower-0.99.2/src/cygwin/up-backend.c	2015-01-06 12:34:16.921122500 -0600
@@ -0,0 +1,573 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2011 Landry Breuil <landry@openbsd.org>
+ * Copyright (C) 2014, 2015 Yaakov Selkowitz <yselkowi@redhat.com>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "up-win-native.h"
+
+#include "up-backend.h"
+#include "up-daemon.h"
+#include "up-marshal.h"
+#include "up-device.h"
+#include <unistd.h> /* sleep() */
+#include <windows.h>
+
+static void	up_backend_class_init	(UpBackendClass	*klass);
+static void	up_backend_init	(UpBackend		*backend);
+static void	up_backend_finalize	(GObject		*object);
+
+static gboolean	up_backend_win_get_power_info(SYSTEM_POWER_STATUS*);
+static UpDeviceState up_backend_win_get_battery_state_value(u_char BatteryFlag);
+LRESULT CALLBACK up_backend_win_powerchange_event_cb(HWND, UINT, WPARAM, LPARAM);
+
+static gboolean		up_win_device_get_on_battery	(UpDevice *device, gboolean *on_battery);
+static gboolean		up_win_device_get_online	(UpDevice *device, gboolean *online);
+static gboolean		up_win_device_refresh		(UpDevice *device);
+
+#define UP_BACKEND_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UP_TYPE_BACKEND, UpBackendPrivate))
+
+struct UpBackendPrivate
+{
+	UpDaemon		*daemon;
+	UpDevice		*ac;
+	UpDevice		*battery;
+	GThread			*win_thread;
+	gboolean		is_laptop;
+	HPOWERNOTIFY	hPowerNotify[2];
+};
+
+enum {
+	SIGNAL_DEVICE_ADDED,
+	SIGNAL_DEVICE_REMOVED,
+	SIGNAL_LAST
+};
+
+static guint signals [SIGNAL_LAST] = { 0 };
+
+G_DEFINE_TYPE (UpBackend, up_backend, G_TYPE_OBJECT)
+
+/**
+ * functions called by upower daemon
+ **/
+
+
+/* those three ripped from freebsd/up-device-supply.c */
+gboolean
+up_win_device_get_on_battery (UpDevice *device, gboolean * on_battery)
+{
+	UpDeviceKind type;
+	UpDeviceState state;
+	gboolean is_present;
+
+	g_return_val_if_fail (on_battery != NULL, FALSE);
+
+	g_object_get (device,
+		      "type", &type,
+		      "state", &state,
+		      "is-present", &is_present,
+		      (void*) NULL);
+
+	if (type != UP_DEVICE_KIND_BATTERY)
+		return FALSE;
+	if (state == UP_DEVICE_STATE_UNKNOWN)
+		return FALSE;
+	if (!is_present)
+		return FALSE;
+
+	*on_battery = (state == UP_DEVICE_STATE_DISCHARGING);
+	return TRUE;
+}
+
+gboolean
+up_win_device_get_online (UpDevice *device, gboolean * online)
+{
+	UpDeviceKind type;
+	gboolean online_tmp;
+
+	g_return_val_if_fail (online != NULL, FALSE);
+
+	g_object_get (device,
+		      "type", &type,
+		      "online", &online_tmp,
+		      (void*) NULL);
+
+	if (type != UP_DEVICE_KIND_LINE_POWER)
+		return FALSE;
+
+	*online = online_tmp;
+
+	return TRUE;
+}
+/**
+ * up_backend_coldplug:
+ * @backend: The %UpBackend class instance
+ * @daemon: The %UpDaemon controlling instance
+ *
+ * Finds all the devices already plugged in, and emits device-add signals for
+ * each of them.
+ *
+ * Return value: %TRUE for success
+ **/
+gboolean
+up_backend_coldplug (UpBackend *backend, UpDaemon *daemon)
+{
+	UpWinNative *acnative = NULL;
+	UpWinNative *battnative = NULL;
+	backend->priv->daemon = g_object_ref (daemon);
+	/* FIXME: no way to get lid status atm */
+	up_daemon_set_lid_is_present (backend->priv->daemon, FALSE);
+
+	if (backend->priv->is_laptop)
+	{
+		acnative = up_win_native_new("/ac");
+		if (!up_device_coldplug (backend->priv->ac, backend->priv->daemon, G_OBJECT(acnative)))
+			g_warning ("failed to coldplug ac");
+		else
+			g_signal_emit (backend, signals[SIGNAL_DEVICE_ADDED], 0, acnative, backend->priv->ac);
+
+		battnative = up_win_native_new("/batt");
+		if (!up_device_coldplug (backend->priv->battery, backend->priv->daemon, G_OBJECT(battnative)))
+			g_warning ("failed to coldplug battery");
+		else
+			g_signal_emit (backend, signals[SIGNAL_DEVICE_ADDED], 0, battnative, backend->priv->battery);
+	}
+
+	return TRUE;
+}
+
+/**
+ * up_backend_unplug:
+ * @backend: The %UpBackend class instance
+ *
+ * Forget about all learned devices, effectively undoing up_backend_coldplug.
+ * Resources are released without emitting signals.
+ */
+void
+up_backend_unplug (UpBackend *backend)
+{
+	if (backend->priv->daemon != NULL) {
+		g_object_unref (backend->priv->daemon);
+		backend->priv->daemon = NULL;
+	}
+}
+
+/**
+ * up_backend_get_critical_action:
+ * @backend: The %UpBackend class instance
+ *
+ * Which action will be taken when %UP_DEVICE_LEVEL_ACTION
+ * warning-level occurs.
+ **/
+const char *
+up_backend_get_critical_action (UpBackend *backend)
+{
+	return "PowerOff";
+}
+
+/**
+ * up_backend_take_action:
+ * @backend: The %UpBackend class instance
+ *
+ * Act upon the %UP_DEVICE_LEVEL_ACTION warning-level.
+ **/
+void
+up_backend_take_action (UpBackend *backend)
+{
+	/* FIXME: Implement */
+}
+
+/**
+ * Cygwin specific code
+ **/
+
+static gboolean
+up_backend_win_get_power_info(SYSTEM_POWER_STATUS *bstate) {
+	bstate->ACLineStatus = 255;
+	bstate->BatteryFlag = 255;
+	bstate->BatteryLifePercent = 255;
+	bstate->BatteryLifeTime = -1;
+
+	if (-1 == GetSystemPowerStatus(bstate)) {
+		DWORD dwMessageId = GetLastError();
+		char lpBuffer[256];
+		FormatMessageA (FORMAT_MESSAGE_FROM_SYSTEM, NULL, dwMessageId,
+			0, lpBuffer, sizeof (lpBuffer), NULL);
+		g_error("GetSystemPowerStatus failed : %s", lpBuffer);
+		return FALSE;
+	}
+	return TRUE;
+}
+
+UpDeviceState up_backend_win_get_battery_state_value(u_char BatteryFlag) {
+	if (BatteryFlag & 255)
+		return UP_DEVICE_STATE_UNKNOWN;
+	else if (BatteryFlag & 128)
+		return UP_DEVICE_STATE_EMPTY;
+	else if (BatteryFlag & 8)
+		return UP_DEVICE_STATE_CHARGING;
+	else if (BatteryFlag & 4)
+		return UP_DEVICE_STATE_EMPTY;
+	return UP_DEVICE_STATE_DISCHARGING; // XXXX
+}
+
+static gboolean
+up_backend_update_ac_state(UpDevice* device)
+{
+	gboolean ret, new_is_online, cur_is_online;
+	SYSTEM_POWER_STATUS sps;
+
+	ret = up_backend_win_get_power_info(&sps);
+	if (!ret)
+		return ret;
+
+	g_object_get (device, "online", &cur_is_online, (void*) NULL);
+	/* XXX use acpiac0.indicator0 if available */
+	new_is_online = (sps.ACLineStatus == 1 ? TRUE : FALSE);
+	if (cur_is_online != new_is_online)
+	{
+		g_object_set (device,
+			"online", new_is_online,
+			(void*) NULL);
+		return TRUE;
+	}
+	return FALSE;
+}
+
+static gboolean
+up_backend_update_battery_state(UpDevice* device)
+{
+	gdouble percentage;
+	gboolean ret, is_present;
+	UpDeviceState cur_state, new_state;
+	gint64 cur_time_to_empty, new_time_to_empty;
+	SYSTEM_POWER_STATUS sps;
+
+	ret = up_backend_win_get_power_info(&sps);
+	if (!ret)
+		return ret;
+
+	g_object_get (device,
+		"state", &cur_state,
+		"percentage", &percentage,
+		"time-to-empty", &cur_time_to_empty,
+		"is-present", &is_present,
+		(void*) NULL);
+
+	/*
+	 * XXX: Stop having a split brain regarding
+	 * up_backend_win_get_battery_state_value(). Either move the state
+	 * setting code below into that function, or inline that function here.
+	 */
+	new_state = up_backend_win_get_battery_state_value(sps.BatteryFlag);
+	// if percentage/minutes goes down or ac is off, we're likely discharging..
+	if (percentage < sps.BatteryLifePercent || cur_time_to_empty < new_time_to_empty || sps.ACLineStatus == 0)
+		new_state = UP_DEVICE_STATE_DISCHARGING;
+	/*
+	 * If we're on AC, we may either be charging, or the battery is already
+	 * fully charged. Figure out which.
+	 */
+	if (sps.ACLineStatus == 1)
+		if ((gdouble) sps.BatteryLifePercent >= 99.0)
+			new_state = UP_DEVICE_STATE_FULLY_CHARGED;
+		else
+			new_state = UP_DEVICE_STATE_CHARGING;
+
+	if ((sps.BatteryFlag & 128) ||
+	    (sps.BatteryFlag & 255)) {
+		/* Reset some known fields which remain untouched below. */
+		g_object_set(device,
+			     "is-rechargeable", FALSE,
+			     "energy", (gdouble) 0.0,
+			     "energy-empty", (gdouble) 0.0,
+			     "energy-full", (gdouble) 0.0,
+			     "energy-full-design", (gdouble) 0.0,
+			     "energy-rate", (gdouble) 0.0,
+			     NULL);
+		is_present = FALSE;
+		if (sps.BatteryFlag & 128)
+			new_state = UP_DEVICE_STATE_EMPTY;
+		else
+			new_state = UP_DEVICE_STATE_UNKNOWN;
+	} else {
+		is_present = TRUE;
+	}
+
+	// zero out new_time_to empty if we're not discharging or minutes left is negative
+	new_time_to_empty = (new_state == UP_DEVICE_STATE_DISCHARGING && sps.BatteryLifeTime > 0 ? sps.BatteryLifeTime / 60 : 0);
+
+	if (cur_state != new_state ||
+		percentage != (gdouble) sps.BatteryLifePercent ||
+		cur_time_to_empty != new_time_to_empty)
+	{
+		g_object_set (device,
+			"state", new_state,
+			"percentage", (gdouble) sps.BatteryLifePercent,
+			"time-to-empty", new_time_to_empty * 60,
+			"is-present", is_present,
+			(void*) NULL);
+		return TRUE;
+	}
+	return FALSE;
+}
+
+/* callback updating the device */
+/* http://www.zachburlingame.com/2011/04/capturing-windows-power-events-in-a-console-application/ */
+/* http://hg.zachburlingame.com/windowspowerevents */
+LRESULT CALLBACK
+up_backend_win_powerchange_event_cb(HWND hWnd, UINT message,
+                                    WPARAM wParam, LPARAM lParam)
+{
+	LRESULT ret = 0;
+	static UpBackend *backend = NULL;
+
+	switch (message) {
+	case WM_CREATE: {
+		CREATESTRUCT cs = *(LPCREATESTRUCT)lParam;
+		g_return_val_if_fail (UP_IS_BACKEND (cs.lpCreateParams), FALSE);
+		backend = UP_BACKEND (cs.lpCreateParams);
+		break;
+	}
+	case WM_DESTROY:
+		PostQuitMessage (ERROR_SUCCESS);
+		/* fall through */
+	case WM_QUERYENDSESSION:
+	case WM_ENDSESSION:
+		break;
+	case WM_POWERBROADCAST:
+		if (wParam == PBT_POWERSETTINGCHANGE) {
+			up_win_device_refresh(backend->priv->ac);
+			up_win_device_refresh(backend->priv->battery);
+			break;
+		}
+		/* else fall through */
+	default:
+		ret = DefWindowProc (hWnd, message, wParam, lParam);
+	}
+	return ret;
+}
+
+static gboolean
+up_win_device_refresh(UpDevice* device)
+{
+	UpDeviceKind type;
+	gboolean ret;
+	g_object_get (device, "type", &type, NULL);
+
+	switch (type) {
+		case UP_DEVICE_KIND_LINE_POWER:
+			ret = up_backend_update_ac_state(device);
+			break;
+		case UP_DEVICE_KIND_BATTERY:
+			ret = up_backend_update_battery_state(device);
+			break;
+		default:
+			g_assert_not_reached ();
+			break;
+	}
+
+	if (ret)
+		g_object_set (device, "update-time", (guint64) g_get_real_time () / G_USEC_PER_SEC, NULL);
+
+	return ret;
+}
+
+/* setup windows notification */
+/* http://www.zachburlingame.com/2011/04/capturing-windows-power-events-in-a-console-application/ */
+/* http://hg.zachburlingame.com/windowspowerevents */
+static gpointer
+up_backend_win_event_thread(gpointer object)
+{
+	UpBackend *backend;
+	HMODULE user32;
+	HPOWERNOTIFY (WINAPI *pRPSN)(HANDLE, LPCGUID, DWORD);
+	WNDCLASSEX wcx = { sizeof (WNDCLASSEX), 0, (WNDPROC) up_backend_win_powerchange_event_cb,
+			   0, 0, NULL, NULL, NULL, NULL, NULL, "HiddenWndClass", NULL };
+	HWND hwnd;
+	MSG msg;
+	BOOL ret;
+
+	g_return_val_if_fail (UP_IS_BACKEND (object), NULL);
+	backend = UP_BACKEND (object);
+
+	g_debug("setting up win thread");
+
+	/* only available since Vista/2008 */
+	user32 = LoadLibrary ("user32.dll");
+	pRPSN = (typeof (pRPSN)) GetProcAddress (user32, "RegisterPowerSettingNotification");
+	if (!pRPSN) {
+		g_error ("RegisterPowerSettingNotification missing");
+		FreeLibrary (user32);
+		return NULL;
+	}
+
+	RegisterClassEx (&wcx);
+	hwnd = CreateWindow("HiddenWndClass", NULL, WS_OVERLAPPEDWINDOW, -1, -1,
+			    0, 0, NULL, NULL, NULL, object);
+
+	if (!hwnd) {
+		g_error("CreateWindow");
+		return NULL;
+	}
+
+	backend->priv->hPowerNotify[0] = pRPSN (hwnd, &GUID_ACDC_POWER_SOURCE, DEVICE_NOTIFY_WINDOW_HANDLE);
+	backend->priv->hPowerNotify[1] = pRPSN (hwnd, &GUID_BATTERY_PERCENTAGE_REMAINING, DEVICE_NOTIFY_WINDOW_HANDLE);
+
+	FreeLibrary (user32);
+
+	while ((ret = GetMessage (&msg, hwnd, 0, 0)) != 0) {
+		if (ret != -1) {
+			TranslateMessage(&msg);
+			DispatchMessage(&msg);
+		}
+	}
+
+	return NULL;
+}
+
+/**
+ * GObject class functions
+ **/
+
+/**
+ * up_backend_new:
+ *
+ * Return value: a new %UpBackend object.
+ **/
+UpBackend *
+up_backend_new (void)
+{
+	return g_object_new (UP_TYPE_BACKEND, NULL);
+}
+
+/**
+ * up_backend_class_init:
+ * @klass: The UpBackendClass
+ **/
+static void
+up_backend_class_init (UpBackendClass *klass)
+{
+	GObjectClass *object_class = G_OBJECT_CLASS (klass);
+	object_class->finalize = up_backend_finalize;
+
+	signals [SIGNAL_DEVICE_ADDED] =
+		g_signal_new ("device-added",
+			      G_TYPE_FROM_CLASS (object_class), G_SIGNAL_RUN_LAST,
+			      G_STRUCT_OFFSET (UpBackendClass, device_added),
+			      NULL, NULL, up_marshal_VOID__POINTER_POINTER,
+			      G_TYPE_NONE, 2, G_TYPE_POINTER, G_TYPE_POINTER);
+	signals [SIGNAL_DEVICE_REMOVED] =
+		g_signal_new ("device-removed",
+			      G_TYPE_FROM_CLASS (object_class), G_SIGNAL_RUN_LAST,
+			      G_STRUCT_OFFSET (UpBackendClass, device_removed),
+			      NULL, NULL, up_marshal_VOID__POINTER_POINTER,
+			      G_TYPE_NONE, 2, G_TYPE_POINTER, G_TYPE_POINTER);
+
+	g_type_class_add_private (klass, sizeof (UpBackendPrivate));
+}
+
+/**
+ * up_backend_init:
+ **/
+static void
+up_backend_init (UpBackend *backend)
+{
+	GError *err = NULL;
+	UpDeviceClass *device_class;
+	gint64 current_time;
+
+	backend->priv = UP_BACKEND_GET_PRIVATE (backend);
+	backend->priv->is_laptop = up_native_is_laptop();
+	g_debug("is_laptop:%d",backend->priv->is_laptop);
+	if (backend->priv->is_laptop)
+	{
+		backend->priv->ac = UP_DEVICE(up_device_new());
+		backend->priv->battery = UP_DEVICE(up_device_new ());
+		device_class = UP_DEVICE_GET_CLASS (backend->priv->battery);
+		device_class->get_on_battery = up_win_device_get_on_battery;
+		device_class->get_online = up_win_device_get_online;
+		device_class->refresh = up_win_device_refresh;
+		device_class = UP_DEVICE_GET_CLASS (backend->priv->ac);
+		device_class->get_on_battery = up_win_device_get_on_battery;
+		device_class->get_online = up_win_device_get_online;
+		device_class->refresh = up_win_device_refresh;
+		/* creates thread */
+		if((backend->priv->win_thread = (GThread*) g_thread_try_new("win-poller",(GThreadFunc)up_backend_win_event_thread, (void*) backend, &err) == NULL))
+		{
+			g_warning("Thread create failed: %s", err->message);
+			g_error_free (err);
+		}
+
+		/* setup dummy */
+		current_time = g_get_real_time () / G_USEC_PER_SEC;
+		g_object_set (backend->priv->battery,
+			      "type", UP_DEVICE_KIND_BATTERY,
+			      "power-supply", TRUE,
+			      "is-present", TRUE,
+			      "is-rechargeable", TRUE,
+			      "has-history", TRUE,
+			      "state", UP_DEVICE_STATE_UNKNOWN,
+			      "percentage", 0.0f,
+			      "time-to-empty", (gint64) 0,
+			      "update-time", (guint64) current_time,
+			      (void*) NULL);
+		g_object_set (backend->priv->ac,
+			      "type", UP_DEVICE_KIND_LINE_POWER,
+			      "online", TRUE,
+			      "power-supply", TRUE,
+			      "update-time", (guint64) current_time,
+			      (void*) NULL);
+	}
+}
+/**
+ * up_backend_finalize:
+ **/
+static void
+up_backend_finalize (GObject *object)
+{
+	UpBackend *backend;
+	HMODULE user32;
+	BOOL (WINAPI *pUPSN)(HPOWERNOTIFY);
+
+	g_return_if_fail (UP_IS_BACKEND (object));
+
+	backend = UP_BACKEND (object);
+
+	if (backend->priv->daemon != NULL)
+		g_object_unref (backend->priv->daemon);
+	if (backend->priv->battery != NULL)
+		g_object_unref (backend->priv->battery);
+	if (backend->priv->ac != NULL)
+		g_object_unref (backend->priv->ac);
+
+	user32 = LoadLibrary ("user32.dll");
+	pUPSN = (typeof (pUPSN)) GetProcAddress (user32, "UnregisterPowerSettingNotification");
+	if (pUPSN) {
+		if (backend->priv->hPowerNotify[0] != NULL)
+			pUPSN (backend->priv->hPowerNotify[0]);
+		if (backend->priv->hPowerNotify[1] != NULL)
+			pUPSN (backend->priv->hPowerNotify[1]);
+	}
+	FreeLibrary (user32);
+
+	/* XXX stop win_thread ? */
+
+	G_OBJECT_CLASS (up_backend_parent_class)->finalize (object);
+}
+
--- origsrc/upower-0.99.2/src/cygwin/up-native.c	1969-12-31 18:00:00.000000000 -0600
+++ src/upower-0.99.2/src/cygwin/up-native.c	2015-01-06 02:50:31.310434800 -0600
@@ -0,0 +1,78 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2011 Landry Breuil <landry@openbsd.org>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "up-win-native.h"
+#include "up-native.h"
+#include <windows.h>
+
+G_DEFINE_TYPE (UpWinNative, up_win_native, G_TYPE_OBJECT)
+
+static void
+up_win_native_class_init (UpWinNativeClass *klass)
+{
+}
+
+static void
+up_win_native_init (UpWinNative *self)
+{
+	self->path = "empty";
+}
+
+UpWinNative *
+up_win_native_new(const gchar * path)
+{
+	UpWinNative *native;
+	native = UP_WIN_NATIVE (g_object_new (UP_TYPE_WIN_NATIVE, NULL));
+	native->path = g_strdup(path);
+	return native;
+}
+
+const gchar *
+up_win_native_get_path(UpWinNative * native)
+{
+	return native->path;
+}
+
+/**
+ * up_native_get_native_path:
+ * @object: the native tracking object
+ *
+ * This converts a GObject used as the device data into a native path.
+ *
+ * Return value: The native path for the device which is unique, e.g. "/sys/class/power/BAT1"
+ **/
+const gchar *
+up_native_get_native_path (GObject *object)
+{
+	return up_win_native_get_path (UP_WIN_NATIVE (object));
+}
+
+/**
+ * detect if we are on a desktop system or a laptop
+ * heuristic : laptop if SYSTEM_POWER_STATUS.BatteryFlag != 128
+ */
+gboolean
+up_native_is_laptop()
+{
+	SYSTEM_POWER_STATUS sps;
+	GetSystemPowerStatus(&sps);
+	return (sps.BatteryFlag & 128) ? FALSE : TRUE;
+}
--- origsrc/upower-0.99.2/src/cygwin/up-win-native.h	1969-12-31 18:00:00.000000000 -0600
+++ src/upower-0.99.2/src/cygwin/up-win-native.h	2015-01-06 02:47:14.270413900 -0600
@@ -0,0 +1,55 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2011 Landry Breuil <landry@openbsd.org>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef __UP_WIN_NATIVE_H__
+#define __UP_WIN_NATIVE_H__
+
+#include <glib.h>
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define UP_TYPE_WIN_NATIVE		(up_win_native_get_type ())
+#define UP_WIN_NATIVE(o)	   	(G_TYPE_CHECK_INSTANCE_CAST ((o), UP_TYPE_WIN_NATIVE, UpWinNative))
+#define UP_WIN_NATIVE_CLASS(k)	(G_TYPE_CHECK_CLASS_CAST((k), UP_TYPE_WIN_NATIVE, UpWinNativeClass))
+#define UP_IS_WIN_NATIVE(o)	(G_TYPE_CHECK_INSTANCE_TYPE ((o), UP_TYPE_WIN_NATIVE))
+#define UP_IS_WIN_NATIVE_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), UP_TYPE_WIN_NATIVE))
+#define UP_WIN_NATIVE_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UP_TYPE_WIN_NATIVE, UpWinNativeClass))
+
+typedef struct
+{
+	GObject	parent;
+	gchar*	path;
+} UpWinNative;
+
+typedef struct
+{
+	GObjectClass	parent_class;
+} UpWinNativeClass;
+
+
+GType up_win_native_get_type (void);
+UpWinNative* up_win_native_new (const char*);
+const gchar * up_win_native_get_path(UpWinNative*);
+gboolean up_native_is_laptop(void);
+G_END_DECLS
+
+#endif
